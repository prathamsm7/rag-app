
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  chatSessions  ChatSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id            String       @id @default(cuid())
  userId        String
  chatSessionId String?
  name          String
  type          String       // 'pdf', 'website', 'text'
  source        String       // filename, URL, or 'text_input'
  summary       String?
  chunkCount    Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatSession   ChatSession? @relation("SessionDocuments", fields: [chatSessionId], references: [id], onDelete: SetNull)
  messages      Message[]

  @@index([userId])
  @@index([chatSessionId])
}

model ChatSession {
  id        String     @id @default(cuid())
  userId    String
  title     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  documents Document[] @relation("SessionDocuments")

  @@index([userId])
}

model Message {
  id            String       @id @default(cuid())
  chatSessionId String
  documentId    String?
  role          String       // 'user' or 'assistant'
  content       String
  createdAt     DateTime     @default(now())
  chatSession   ChatSession  @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  document      Document?    @relation(fields: [documentId], references: [id], onDelete: SetNull)

  @@index([chatSessionId])
  @@index([documentId])
}
